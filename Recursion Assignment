#Geometric Sum

"""
from math import *
from collections import *
from sys import *
from os import *

## Read input as specified in the question.
## Print output as specified in the question.
def geometric_sum(n):
    if n == 0:
        ##return 0
        return 1
    return (1 / pow(2, n)) + geometric_sum(n - 1)

n = int(input())
##print("{:5f}".format(geometric_sum(n)))
print (str.format('{0:.5f}',geometric_sum(n))

""" "\n"\t

#Check Palindrome(recurisive)

"""

from math import *
from collections import *
from sys import *
from os import *

## Read input as specified in the question.
## Print output as specified in the question.
def isPalindrome(string:str)->bool:
    S=len(string)
    if S<=1:
        return True
    if string[0]!=string[S-1]:
        return False
    return isPalindrome(string[1:-1])
    
  """ "\n"\t

#Sum of Digits(recursive)

"""
from math import *
from collections import *
from sys import *
from os import *

## Read input as specified in the question.
## Print output as specified in the question.
def sum_of_digit(n):
    if n<10:
        return n
        
    return (n%10+sum_of_digit(int(n/10)))
        

num=int(input())
result=sum_of_digit(num)
print(result)

""" "\n"\t

#Multiplication(recursive)

"""
from sys import setrecursionlimit

setrecursionlimit(10**8)

def multiplication(m, n):
    if n == 0:
        return 0

    if m == 0:
        return 0

    return m + multiplication(m, n - 1)

n = int(input())
m = int(input())
print(multiplication(m, n))
""" "\n"\t

#Count Zeroes

"""
from math import *
from collections import *
from sys import *
from os import *

## Read input as specified in the question.
## Print output as specified in the question.
def count_zeros(N):     
    c=[]     
    return help_(N,c)  
def help_(N,c):     
    if N==0:        
        return 1     
    if N<10:         
        return len(c)     
    elif N%10==0:         
        c.append("0")     
    return help_(N//10,c)  
N=int(input()) 
zero_count=count_zeros(N) 
print(zero_count)

""" "\n"\t

#String to Interger

"""
def StringtoInterger(S):

    if(len(S) == 1):

        return ord(S[0]) - ord('0')
    else:

        y = StringtoInterger(S[1:])
        x = ord(S[0]) - ord('0')
        x = x *(10**(len(S) - 1)) + y
        return x

S=input()
print(StringtoInterger(S))

""" "\n"\t

#Pair Star

"""

from math import *
from collections import *
from sys import *
from os import *

## Read input as specified in the question.
## Print output as specified in the question.
def pairStar(s):

    if len(s) <= 1:
        return s


    if s[0] == s[1]:
        return s[0] + "*" + pairStar(s[1:])


    else:
        return s[0] + pairStar(s[1:])

s=input()
print(pairStar(s))

""" "\n"\t

#Check AB

"""

from math import *
from collections import *
from sys import *
from os import *

## Read input as specified in the question.
## Print output as specified in the question.

def checkab(s):
    if len(s)==0:
        return True
    if s[0]=="a":
        if len(s[1:])>1 and s[1:3]=="bb":
            return checkab(s[3:])
        else:
            return checkab(s[1:])
    else:
        return False
s=input()
if checkab(s)==True:
    print("true")
else:
    print("false")

""" "\n"\t

#StairCase

"""
from math import *
from collections import *
from sys import *
from os import *

## Read input as specified in the question.
## Print output as specified in the question.
def findStep(n):
    if (n==0):
        return 1
    elif(n<0):
        return 0

    else:
        return findStep(n-3) + findStep(n-2) +findStep(n-1)

    
    
n=int(input())
print(findStep(n))

""" "\n"\t
