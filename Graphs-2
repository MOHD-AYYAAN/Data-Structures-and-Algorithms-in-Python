#Topological Sort

"""

from collections import defaultdict

class Graph:
    def __init__(self, V):
        # Initialize the number of vertices
        self.V = V
        # Initialize an adjacency list
        self.adj = defaultdict(list)

    def addEdge(self, v, w):
        # Add an edge from vertex v to vertex w
        self.adj[v].append(w)

def topologicalSortUtil(g, v, visited, stack):
    # Mark the current node as visited
    visited[v] = True
    # Recur for all the vertices adjacent to this vertex
    for i in g.adj[v]:
        if not visited[i]:
            topologicalSortUtil(g, i, visited, stack)
    # Push the current vertex to the stack which stores the result
    stack.append(v)

def topologicalSort(g):
    # Initialize a stack to store the topological sort
    stack = []
    # Mark all the vertices as not visited
    visited = [False] * g.V
    # Call the recursive helper function to store the Topological Sort starting from all vertices one by one
    for i in range(g.V):
        if not visited[i]:
            topologicalSortUtil(g, i, visited, stack)
    # Print contents of the stack
    while stack:
        print(stack.pop(), end=" ")

if __name__ == "__main__":
    # Read the number of vertices
    n = int(input())
    # Read the number of edges
    e = int(input())

    # Create a graph with n vertices
    g = Graph(n)
    # Add edges to the graph
    for _ in range(e):
        a, b = map(int, input().split())
        g.addEdge(a, b)

    # Perform topological sort
    topologicalSort(g)

 """ "\n"\t

#Krushkal'sAlgorithm

"""

class Edge:
    def __init__(self,src,dest,wt):
        self.src = src
        self.dest = dest
        self.wt = wt

def getParent(v,parent):
    if v == parent[v]:
        return v
    return getParent(parent[v],parent)
def kruskal(edges,n,E):
    edges = sorted(edges,key = lambda edge:edge.wt)
    output = []
    
    parent = [i for i in range(n)]
    count = 0
    i = 0
    while count < (n-1):
        currentEdge = edges[i]
        srcParent = getParent(currentEdge.src,parent)
        destParent = getParent(currentEdge.dest,parent)
        
        if srcParent != destParent:
            output.append(currentEdge)
            count+=1
            parent[srcParent] = destParent
        i+=1
    return output

li = [int(ele) for ele in input().split()]
n = li[0]
E = li[1]
edges = []
for i in range(E):
    curr_input = [int(ele) for ele in input().split()]
    src = curr_input[0]
    dest = curr_input[1]
    wt = curr_input[2]
    edge = Edge(src,dest,wt)
    edges.append(edge)
output = kruskal(edges,n,E)
for ele in output:
    if(ele.src < ele.dest):
        print(str(ele.src) + " " + str(ele.dest) + " " + str(ele.wt))
    else:
        print(str(ele.dest) + " " + str(ele.src) + " " + str(ele.wt))

""" "\n"\t

#Prim'S ALgorithm Problem

""" 

## Read input as specified in the question.
## Print output as specified in the question.
import sys
class Graph:
    
    def __init__(self,nVertices):
        self.nVertices = nVertices
        self.adjMatrix = [ [ 0 for i in range(nVertices)] for j in range(nVertices)]
        
    def addEdge(self,v1,v2,wt):

        self.adjMatrix[v1][v2] = wt
        self.adjMatrix[v2][v1] = wt
    
    def __getMinVertex(self,visited,weight):
        minVertex = -1
        for i in range(self.nVertices):
            if(visited[i] is False and (minVertex == -1 or (weight[minVertex] > weight[i]))):
                minVertex = i
        return minVertex
    def prims(self):
        visited = [False for i in range(self.nVertices)]
        parent = [-1 for i in range(self.nVertices)]
        weight = [sys.maxsize for i in range(self.nVertices)]
        
        for i in range(self.nVertices - 1):
            minVertex = self.__getMinVertex(visited,weight)
            visited[minVertex] = True
            for j in range(self.nVertices):
                if(self.adjMatrix[minVertex][j] >0 and visited[j] is False):
                    if(weight[j] > self.adjMatrix[minVertex][j]):
                        weight[j] = self.adjMatrix[minVertex][j]
                        parent[j] = minVertex
        for i in range(1,self.nVertices):
            if parent[i] > i:
                print(str(i) + " " + str(parent[i]) + " " + str(weight[i]))
            else:
                print(str(parent[i]) + " " + str(i) + " " + str(weight[i]))
                        
    def removeEdge(self,v1,v2):
        if not self.containsEdge(v1,v2):
            return
        self.adjMatrix[v1][v2] = 0
        self.adjMatrix[v2][v2] = 0
        
    def containsEdge(self,v1,v2):
        return True if self.adjMatrix[v1][v2] > 0 else False

li = [int(ele) for ele in input().split()]
n = li[0]
E = li[1]
g = Graph(n)
for i in range(E):
    curr_edge = [int(ele) for ele in input().split()]
    g.addEdge(curr_edge[0],curr_edge[1],curr_edge[2])

g.prims()

""" "\n"\t

#Dijakstra's Algorithm


"""

import sys
class Graph:
    
    def __init__(self,nVertices):
        self.nVertices = nVertices
        self.adjMatrix = [ [ 0 for i in range(nVertices)] for j in range(nVertices)]
        
    def addEdge(self,v1,v2,wt):

        self.adjMatrix[v1][v2] = wt
        self.adjMatrix[v2][v1] = wt
        
    def __bfsHelper(s,visited):
        q = queue.Queue()
        q.put(s)
        visited[s] = True
        while q.empty() is False:
            u = q.get()
            print(u)
            for v in range(self.nVertices):
                if self.adjMatrix[u][v] > 0 and visited[v] is False:
                    q.put(v)
                    visited[v] = True
        
    def bfs():
        visited = [False for i in range(self.nVertices)]
        for i in range(self.nVertices):
            if visited[i] is False:
                self.__bfsHelper(i,visited)
                
    def __getMinVertex(self,visited,weight):
        minVertex = -1
        for i in range(self.nVertices):
            if(visited[i] is False and (minVertex == -1 or (weight[minVertex] > weight[i]))):
                minVertex = i
        return minVertex
    def prims(self):
        visited = [False for i in range(self.nVertices)]
        parent = [-1 for i in range(self.nVertices)]
        weight = [sys.maxsize for i in range(self.nVertices)]
        
        for i in range(self.nVertices - 1):
            minVertex = self.__getMinVertex(visited,weight)
            visited[minVertex] = True
            for j in range(self.nVertices):
                if(self.adjMatrix[minVertex][j] >0 and visited[j] is False):
                    if(weight[j] > self.adjMatrix[minVertex][j]):
                        weight[j] = self.adjMatrix[minVertex][j]
                        parent[j] = minVertex
        for i in range(1,self.nVertices):
            if parent[i] > i:
                print(str(i) + " " + str(parent[i]) + " " + str(weight[i]))
            else:
                print(str(parent[i]) + " " + str(i) + " " + str(weight[i]))
    def __getMinVertexD(self,visited,weight):
        minVertex = -1
        for i in range(self.nVertices):
            if(visited[i] is False and (minVertex == -1 or (weight[minVertex] > weight[i]))):
                minVertex = i
        return minVertex
    
    def djikstra(self):
        
        visited = [False for i in range(self.nVertices)]
        dist = [sys.maxsize for i in range(self.nVertices)]
        dist[0] = 0
        for i in range(self.nVertices - 1):
            minVertex = self.__getMinVertexD(visited,dist)
            visited[minVertex] = True
            
            for j in range(self.nVertices):
                if (self.adjMatrix[minVertex][j] > 0 and visited[j] is False):
                    if(dist[j] > dist[minVertex] + self.adjMatrix[minVertex][j]):
                        dist[j] = dist[minVertex] + self.adjMatrix[minVertex][j]
                        
        for i in range(self.nVertices):
            print(str(i) + " " + str(dist[i]))
    def removeEdge(self,v1,v2):
        if not self.containsEdge(v1,v2):
            return
        self.adjMatrix[v1][v2] = 0
        self.adjMatrix[v2][v2] = 0
        
            
    def containsEdge(self,v1,v2):
        return True if self.adjMatrix[v1][v2] > 0 else False

li = [int(ele) for ele in input().split()]
n = li[0]
E = li[1]
g = Graph(n)
for i in range(E):
    curr_edge = [int(ele) for ele in input().split()]
    g.addEdge(curr_edge[0],curr_edge[1],curr_edge[2])

g.djikstra()


""" "\n"\t

#Shortest Path in a Binary Maze

"""

from queue import Queue


# Function to find the shortest path between a given source cell to a destination cell

def shortestPathBinaryMatrix(matrix, src, dest):

    n = len(matrix)

    m = len(matrix[0])


    # Check source cell of the matrix have value 1

    if matrix[src[0]][src[1]]==0:

        return -1
    ans = 0



    visited = [[False] * m for i in range(n)]


    # Mark the source cell as visited

    visited[src[0]][src[1]] = 1


    # Create a queue for BFS

    q = Queue()

    q.put(src)


    # Array details of all 4 possible movements from a cell

    dx = [-1, 0, 0, 1]

    dy = [0, -1, 1, 0]


    # Do a BFS starting from source cell

    while not q.empty():

        sz = q.qsize()


        # Traverse the current level

        for i in range(sz):



            node = q.get()


            # If we have reached the destination cell, return current distance

            if node[0] == dest[0] and node[1] == dest[1]:

                return ans



            for j in range(4):

                newX = dx[j] + node[0]

                newY = dy[j] + node[1]

                if (newX >= 0 and newY >= 0 and newX < n and newY < m and visited[newX][newY]==0 and matrix[newX][newY]):

                    visited[newX][newY] = 1

                    q.put([newX, newY])

        ans += 1
    return -1
                                       
""" "\n"\t

#Topological Sort


"""

from collections import deque

def dfs(vertex, visited, topSort, adj):
    visited[vertex] = True
    for i in adj[vertex]:
        if not visited[i]:
            dfs(i, visited, topSort, adj)
    topSort.append(vertex)

def topologicalSort(edges, N, M):
    adj = [[] for _ in range(N + 1)]  
    for i in range(M):
        adj[edges[i][0]].append(edges[i][1])
    
    visited = [False] * (N + 1)  
    topSort = deque()  

    
    for i in range(1, N + 1):
        if not visited[i]:
            dfs(i, visited, topSort, adj)

    
    order = []
    while topSort:
        order.append(topSort.pop())

    return order

""" "\n"\t

#M-coloring Problem

"""

from os import *
from sys import *
from collections import *
from math import *
class Graph():

    def __init__(self, vertices):
        self.V = vertices
        self.graph = [[0 for column in range(vertices)]
                    for row in range(vertices)]

    def isSafe(self, v, colour, i):
        for i in range(self.V):
            if self.graph[v][i] == 1 and colour[i] == c:
                return False
        return True


def isValid(adjMatrix, cur, color, col, n):
    for i in range(n):
        if adjMatrix[cur][i] and color[i] == col:
            return False
    return True

def graphColor(adjMatrix, m, cur, color, n):
    if cur == n:
        return True
    for j in range(1, m + 1):
        if isValid(adjMatrix, cur, color, j, n):
            color[cur] = j
            if graphColor(adjMatrix, m, cur + 1, color, n):
                return True
            color[cur] = 0
    return False

def graphColoring(adjMatrix, n, m):
    color = [0] * n
    if graphColor(adjMatrix, m, 0, color, n):
        return "Yes"
    return "No"


""" "\n"\t

#Minimum Spanning Tree

"""

from sys import stdin,setrecursionlimit
setrecursionlimit(10**7)



# Edge class for storing the Edges of thee graph
class Edge:
    
    def __init__(self, start, end, weight) :

        self.start = start
        self.end = end
        self.weight = weight


# Finding the set of a node
# (Uses path compression technique)

def findSet(parent, node) :

    if (node == parent[node]) :
        return node
     
    parent[node] = findSet(parent, parent[node])
    return parent[node]


# Function that does the union of two sets
def unionSet(parent, rank, set1, set2) :

    set1 = findSet(parent, set1)
    set2 = findSet(parent, set2)

    if (set1 != set2) :
    
        if (rank[set1] < rank[set2]) :
        
            temp = set1
            set1 = set2
            set2 = temp
        
        parent[set2] = set1

        if (rank[set1] == rank[set2]) :
        
            rank[set1] += 1
        

def minimumSpanningTree(edges, V, E):

	# Sort edges by increasing order of their weight
    edges.sort(key = lambda temp : temp.weight)

    # Variable to store weight of MST
    finalWeight = 0
    parent = [i for i in range(V)]
    rank = [0 for i in range(V)]

    # Traverse through edges in increasing order of their weights
    for i in range(len(edges)) :

        # Find the set for each node in the edge
        set1 = findSet(parent, edges[i].start)
        set2 = findSet(parent, edges[i].end)

        # If both sets are different, perform union
        # And add this edge to our final MST, hence add its weight to final weight
        # Avoiding cycle
        if(set1 != set2) :
        
            finalWeight += edges[i].weight

            # Perform union
            unionSet(parent,rank, set1, set2)

    # Return weight of MST
    return finalWeight


#taking inpit using fast I/O
def takeInput() :
    n_m = stdin.readline().strip().split(" ")
    V = int(n_m[0].strip())
    E = int(n_m[1].strip())

    edges = [Edge(0, 0, 0) for i in range(E)]
    for i in range(E) :

        temp = list(map(int, stdin.readline().strip().split(" ")))
        edges[i] = Edge(temp[0], temp[1], temp[2])

    return edges, V, E


#main
edges, V, E = takeInput()
print(minimumSpanningTree(edges, V, E))


""" "\n"\t

#Network Delay Time

"""

import heapq
from collections import defaultdict
import sys

# Increase recursion limit for large inputs
sys.setrecursionlimit(10**7)

def networkDelayTime(edges, N, K):
    # Create adjacency list
    graph = defaultdict(list)
    for u, v, w in edges:
        graph[u].append((v, w))

    # Initialize distances with infinity
    distances = {node: float('inf') for node in range(1, N+1)}
    distances[K] = 0

    # Priority queue for Dijkstra's algorithm
    priority_queue = [(0, K)]

    while priority_queue:
        current_distance, current_node = heapq.heappop(priority_queue)

        # Skip processing if current distance is greater than known shortest distance
        if current_distance > distances[current_node]:
            continue

        # Update distances for each neighbor
        for neighbor, weight in graph[current_node]:
            distance = current_distance + weight
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(priority_queue, (distance, neighbor))

    # Calculate the maximum distance to any node
    max_distance = max(distances.values())

    # Return the result based on whether all nodes are reachable
    return max_distance if max_distance != float('inf') else -1


""" "\n"\t

#Islands

"""

import sys 
sys.setrecursionlimit(10**6)

def countConnectedGroups(V, edges):
    adj_list = {i: [] for i in range(V)}
    for a, b in edges:
        adj_list[a].append(b)
        adj_list[b].append(a)
    
    def dfs(node, visited):
        visited.add(node)
        for neighbor in adj_list[node]:
            if neighbor not in visited:
                dfs(neighbor, visited)
    
    visited = set()
    connected_groups = 0
    
    for i in range(V):
        if i not in visited:
            connected_groups += 1
            dfs(i, visited)
    
    return connected_groups

if __name__ == "__main__":
    V, E = map(int, input().split())
    edges = [tuple(map(int, input().split())) for _ in range(E)]
    
    result = countConnectedGroups(V, edges)
    
    print(result)

""" "\n"\t
