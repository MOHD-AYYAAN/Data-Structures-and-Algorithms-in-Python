#Mirror Binary Trees

"""

from sys import stdin, setrecursionlimit
import queue

setrecursionlimit(10 ** 6)


#Following is the structure used to represent the Binary Tree Node
class BinaryTreeNode:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None




def mirrorBinaryTree(root) :
    # Your code goes here
    if (root == None):
        return
    else:
 
        temp = root
 
        """ do the subtrees """
        mirrorBinaryTree(root.left)
        mirrorBinaryTree(root.right)
 
        """ swap the pointers in this node """
        temp = root.left
        root.left = root.right
        root.right = temp
 






























#Taking level-order input using fast I/O method
def takeInput():
    levelOrder = list(map(int, stdin.readline().strip().split(" ")))
    start = 0
    
    length = len(levelOrder)

    if length == 1 :
        return None
    
    root = BinaryTreeNode(levelOrder[start])
    start += 1

    q = queue.Queue()
    q.put(root)

    while not q.empty():
        currentNode = q.get()

        leftChild = levelOrder[start]
        start += 1

        if leftChild != -1:
            leftNode = BinaryTreeNode(leftChild)
            currentNode.left =leftNode
            q.put(leftNode)

        rightChild = levelOrder[start]
        start += 1

        if rightChild != -1:
            rightNode = BinaryTreeNode(rightChild)
            currentNode.right =rightNode
            q.put(rightNode)

    return root

	
def printLevelWise(root):
    if root==None:
        return

    inputQ = queue.Queue()
    outputQ = queue.Queue()
    inputQ.put(root)

    while not inputQ.empty():
       
        while not inputQ.empty():
       
            curr = inputQ.get()
            print(curr.data, end=' ')
            if curr.left!=None:
                outputQ.put(curr.left)
            if curr.right!=None:
                outputQ.put(curr.right)
       
        print()
        inputQ, outputQ = outputQ, inputQ


# Main
root = takeInput()

mirrorBinaryTree(root)
printLevelWise(root)

""" "\n"\t

#Diameter of Binary Tree

"""
from sys import stdin, setrecursionlimit
import queue

setrecursionlimit(10 ** 6)


#Following is the structure used to represent the Binary Tree Node
class BinaryTreeNode:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None


def diameterOfBinaryTree(root) :
    # Your code goes here
    pair=diameterHelper(root)
    return pair.diameter

class Pair:
    def __init__(self, diameter, height):
        self.diameter=diameter
        self.height=height

def diameterHelper(root):
    if root is None:
        pair=Pair(0,0)
        return pair
    leftPair=diameterHelper(root.left)
    rightPair=diameterHelper(root.right)

    leftDiameter=leftPair.diameter
    rightDiameter=rightPair.diameter

    diameterfromroot = leftPair.height + rightPair.height + 1

    diameter = max(leftDiameter, rightDiameter, diameterfromroot)
    height=max(leftPair.height,rightPair.height) + 1

    return Pair(diameter, height)
# Example usage:
# root = TreeNode()
# print(diameterOfBinaryTree(root))


# def diameterOfBinaryTree(root) :
#     # Your code goes here
#     if root is None:
#         return 0
#     lheight=diameterOfBinaryTree((root.left))
#     rheight=diameterOfBinaryTree(root.right)

#     ldiameter=diameterOfBinaryTree(root.left)
#     rdiameter=diameterOfBinaryTree(root.right)


#     return max(lheight + rheight + 1, max(ldiameter, rdiameter))


































    




#Taking level-order input using fast I/O method
def takeInput():
    levelOrder = list(map(int, stdin.readline().strip().split(" ")))
    start = 0
    
    length = len(levelOrder)

    if length == 1 :
        return None
    
    root = BinaryTreeNode(levelOrder[start])
    start += 1

    q = queue.Queue()
    q.put(root)

    while not q.empty():
        currentNode = q.get()

        leftChild = levelOrder[start]
        start += 1

        if leftChild != -1:
            leftNode = BinaryTreeNode(leftChild)
            currentNode.left =leftNode
            q.put(leftNode)

        rightChild = levelOrder[start]
        start += 1

        if rightChild != -1:
            rightNode = BinaryTreeNode(rightChild)
            currentNode.right =rightNode
            q.put(rightNode)

    return root

    
def printLevelWise(root):
    if root==None:
        return

    inputQ = queue.Queue()
    outputQ = queue.Queue()
    inputQ.put(root)

    while not inputQ.empty():
       
        while not inputQ.empty():
       
            curr = inputQ.get()
            print(curr.data, end=' ')
            if curr.left!=None:
                outputQ.put(curr.left)
            if curr.right!=None:
                outputQ.put(curr.right)
       
        print()
        inputQ, outputQ = outputQ, inputQ


# Main
root = takeInput()

print(diameterOfBinaryTree(root))

""" "\n"\t

#Print LevelWise

"""

from sys import stdin, setrecursionlimit
import queue

setrecursionlimit(10 ** 6)


#Following is the structure used to represent the Binary Tree Node
class BinaryTreeNode:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None


def printLevelWise(root):
    # Your code goes here
    q = queue.Queue()    

    if root == None:
        return None
    
    q.put(root)
    
    while (not(q.empty())):
        a = q.get()
        print(a.data, end = ":")
        
        leftChild = a.left
        if leftChild != None:
            print("L:", end = "")
            print(leftChild.data, end = ",")
            q.put(leftChild)
        else:
            print("L:", end = "")
            print(-1, end = ",")
            
        rightChild = a.right
        if rightChild != None:
            print("R:", end = "")
            print(rightChild.data)
            q.put(rightChild)
        else:
            print("R:", end = "")
            print(-1)
                      
    return root































    



#Taking level-order input using fast I/O method
def takeInput():
    levelOrder = list(map(int, stdin.readline().strip().split(" ")))
    start = 0
    
    length = len(levelOrder)

    if length == 1 :
        return None
    
    root = BinaryTreeNode(levelOrder[start])
    start += 1

    q = queue.Queue()
    q.put(root)

    while not q.empty():
        currentNode = q.get()

        leftChild = levelOrder[start]
        start += 1

        if leftChild != -1:
            leftNode = BinaryTreeNode(leftChild)
            currentNode.left =leftNode
            q.put(leftNode)

        rightChild = levelOrder[start]
        start += 1

        if rightChild != -1:
            rightNode = BinaryTreeNode(rightChild)
            currentNode.right =rightNode
            q.put(rightNode)

    return root


# Main
root = takeInput()
printLevelWise(root)

""" "\n"\t

#Construct Tree from preorder and Inorder

"""

from sys import stdin, setrecursionlimit
import queue

setrecursionlimit(10 ** 6)


#Following is the structure used to represent the Binary Tree Node
class BinaryTreeNode:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

def printTreeDetailed(root):
    if root==None:
        return
    print(root.data,end=":")
    if root.left!=None:
        print("L",root.left.data,end=",")
    if root.right!=None:
        print("R",root.right.data,end="")
    print()
    printTreeDetailed(root.left)
    printTreeDetailed(root.right)

def buildTree(preOrder, inOrder, n) :
	#Your code goes here
    if len(preOrder)==0:
        return None
    rootData=preOrder[0]
    root=BinaryTreeNode(rootData)
    rootIndexInInOrder=-1
    for i in range(0,len(inOrder)):
        if inOrder[i]==rootData:
            rootIndexInInOrder=i
            break
    if rootIndexInInOrder==-1:
        return None
        
    leftInOrder=inOrder[0:rootIndexInInOrder]
    rightInOrder=inOrder[rootIndexInInOrder+1:]
        
    lenLeftSubtree=len(leftInOrder)
        
    leftPreOrder=preOrder[1:lenLeftSubtree+1]
    rightPreOrder=preOrder[lenLeftSubtree+1:]
        
    leftChild=buildTree(leftPreOrder,leftInOrder, n)
    rightChild=buildTree(rightPreOrder,rightInOrder,n)
        
    root.left=leftChild
    root.right=rightChild
    return root



































'''-------------------------- Utility Functions --------------------------'''

def printLevelWise(root):
    if root is None :
        return

    pendingNodes = queue.Queue()
    pendingNodes.put(root)
    pendingNodes.put(None)

    while not pendingNodes.empty(): 
        frontNode = pendingNodes.get()
    
        if frontNode is None :
            print()
            
            if not pendingNodes.empty() :
                pendingNodes.put(None)
                
        else :
            print(frontNode.data, end = " ")
            
            if frontNode.left is not None :
                pendingNodes.put(frontNode.left)
                
                
            if frontNode.right is not None :
                pendingNodes.put(frontNode.right)


                

#Taking level-order input using fast I/O method
def takeInput():
    n = int(stdin.readline().strip())

    if n == 0 :
        return list(), list(), 0

    preOrder = list(map(int, stdin.readline().strip().split(" ")))
    inOrder = list(map(int, stdin.readline().strip().split(" ")))

    return preOrder, inOrder, n


# Main
preOrder, inOrder, n = takeInput()
root = buildTree(preOrder, inOrder, n)
printLevelWise(root)

""" "\n"\t

#Construct tree from postorder and Inorder

"""

from sys import stdin, setrecursionlimit
import queue

setrecursionlimit(10 ** 6)


#Following is the structure used to represent the Binary Tree Node
class BinaryTreeNode:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None



def solver(postOrder, pStart, pEnd, inOrder, inStart, inEnd):
    if (pStart > pEnd) or (inStart > inEnd):
        return None 

    rootData = postOrder[pEnd]
    root = BinaryTreeNode(rootData)

    temp = 0
    for i in range(inStart, inEnd+1):
        if (rootData == inOrder[i]):
            temp = i 
            break


    root.left = solver(postOrder, pStart, pStart+temp - inStart - 1, inOrder, inStart, temp-1)
    root.right = solver(postOrder, pStart+temp - inStart, pEnd-1, inOrder, temp+1, inEnd)

    return root



def buildTree(postOrder, inOrder, n) :
    pStart = 0
    pEnd = n-1 
    inStart = 0
    inEnd = n-1


    return solver(postOrder, pStart, pEnd, inOrder, inStart, inEnd)




'''-------------------------- Utility Functions --------------------------'''

def printLevelWise(root):
    if root is None :
        return

    pendingNodes = queue.Queue()
    pendingNodes.put(root)
    pendingNodes.put(None)

    while not pendingNodes.empty(): 
        frontNode = pendingNodes.get()
    
        if frontNode is None :
            print()
            
            if not pendingNodes.empty() :
                pendingNodes.put(None)
                
        else :
            print(frontNode.data, end = " ")
            
            if frontNode.left is not None :
                pendingNodes.put(frontNode.left)
                
                
            if frontNode.right is not None :
                pendingNodes.put(frontNode.right)


                

#Taking level-order input using fast I/O method
def takeInput():
    n = int(stdin.readline().strip())

    if n == 0 :
        return list(), list(), 0

    postOrder = list(map(int, stdin.readline().strip().split(" ")))
    inOrder = list(map(int, stdin.readline().strip().split(" ")))

    return postOrder, inOrder, n


# Main
postOrder, inOrder, n = takeInput()
root = buildTree(postOrder, inOrder, n)
printLevelWise(root)

""""\n"\t


#Create and Insert Duplicate

"""

from sys import stdin, setrecursionlimit
import queue

setrecursionlimit(10 ** 6)


#Following is the structure used to represent the Binary Tree Node
class BinaryTreeNode:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None




def NewNode(obj):
    new = BinaryTreeNode(root)
    new.data = obj
    new.left = None
    new.right = None
    return new

def insertDuplicateNode(root):
    if root == None:
        return
    temp = BinaryTreeNode(root)
    insertDuplicateNode(root.left)
    insertDuplicateNode(root.right)
    temp = root.left
    root.left = NewNode(root.data)
    root.left.left = temp
    pass

#Taking level-order input using fast I/O method
def takeInput():
    
    levelOrder = list(map(int, stdin.readline().strip().split(" ")))
    start = 0
    
    length = len(levelOrder)

    if length == 1 :
        return None
    
    root = BinaryTreeNode(levelOrder[start])
    start += 1

    q = queue.Queue()
    q.put(root)

    while not q.empty():
        currentNode = q.get()

        leftChild = levelOrder[start]
        start += 1

        if leftChild != -1:
            leftNode = BinaryTreeNode(leftChild)
            currentNode.left =leftNode
            q.put(leftNode)

        rightChild = levelOrder[start]
        start += 1

        if rightChild != -1:
            rightNode = BinaryTreeNode(rightChild)
            currentNode.right =rightNode
            q.put(rightNode)

    return root

    
def printLevelWise(root):
    if root is None:
        return

    inputQ = queue.Queue()
    outputQ = queue.Queue()
    inputQ.put(root)

    while not inputQ.empty():
       
        while not inputQ.empty():
       
            curr = inputQ.get()
            print(curr.data, end=' ')
            if curr.left!=None:
                outputQ.put(curr.left)
            if curr.right!=None:
                outputQ.put(curr.right)
       
        print()
        inputQ, outputQ = outputQ, inputQ


# Main
root = takeInput()

insertDuplicateNode(root)
printLevelWise(root)

""" "\n"\t

#Minimum and Maximum in the Binary Tree

"""

from sys import stdin, setrecursionlimit
import queue

setrecursionlimit(10 ** 6)


# Following is the structure used to represent the Binary Tree Node
class BinaryTreeNode:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None


# Representation of the Pair Class
class Pair:
    def __init__(self, minimum, maximum):
        self.minimum = minimum
        self.maximum = maximum


def getMinAndMax(root):
    # Base case: if the root is None, return a Pair with extreme values
    if root is None:
        return Pair(float('inf'), float('-inf'))

    # Recursive calls to get min and max from the left and right subtrees
    leftPair = getMinAndMax(root.left)
    rightPair = getMinAndMax(root.right)

    # Calculate the minimum and maximum for the current node
    minimum = min(root.data, leftPair.minimum, rightPair.minimum)
    maximum = max(root.data, leftPair.maximum, rightPair.maximum)

    return Pair(minimum, maximum)


# Taking level-order input using fast I/O method
def takeInput():
    levelOrder = list(map(int, stdin.readline().strip().split(" ")))
    start = 0

    length = len(levelOrder)

    if length == 1:
        return None

    root = BinaryTreeNode(levelOrder[start])
    start += 1

    q = queue.Queue()
    q.put(root)

    while not q.empty():
        currentNode = q.get()

        leftChild = levelOrder[start]
        start += 1

        if leftChild != -1:
            leftNode = BinaryTreeNode(leftChild)
            currentNode.left = leftNode
            q.put(leftNode)

        rightChild = levelOrder[start]
        start += 1

        if rightChild != -1:
            rightNode = BinaryTreeNode(rightChild)
            currentNode.right = rightNode
            q.put(rightNode)

    return root


def printLevelWise(root):
    if root is None:
        return

    inputQ = queue.Queue()
    outputQ = queue.Queue()
    inputQ.put(root)

    while not inputQ.empty():
        while not inputQ.empty():
            curr = inputQ.get()
            print(curr.data, end=' ')
            if curr.left is not None:
                outputQ.put(curr.left)
            if curr.right is not None:
                outputQ.put(curr.right)

        print()
        inputQ, outputQ = outputQ, inputQ


# Main
root = takeInput()

pair = getMinAndMax(root)
print(str(pair.minimum) + " " + str(pair.maximum))


""" "\n"\t

#Level Order Traversal

"""

from sys import stdin, setrecursionlimit
import queue

setrecursionlimit(10 ** 6)

# Structure to represent the Binary Tree Node
class BinaryTreeNode:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

def printLevelWise(root):
    if root is None:
        return
    
    q = queue.Queue()
    q.put(root)
    q.put(None)  # Marker for the end of a level
    
    while not q.empty():
        current = q.get()
        
        if current is None:
            print()  # Print a newline to separate levels
            if not q.empty():
                q.put(None)  # Add marker for the next level
        else:
            print(current.data, end=" ")
            if current.left is not None:
                q.put(current.left)
            if current.right is not None:
                q.put(current.right)

def takeInput():
    levelOrder = list(map(int, stdin.readline().strip().split(" ")))
    
    if not levelOrder or levelOrder[0] == -1:
        return None
    
    root = BinaryTreeNode(levelOrder[0])
    q = queue.Queue()
    q.put(root)
    
    index = 1
    while not q.empty() and index < len(levelOrder):
        currentNode = q.get()
        
        if index < len(levelOrder):
            leftChild = levelOrder[index]
            index += 1
            if leftChild != -1:
                leftNode = BinaryTreeNode(leftChild)
                currentNode.left = leftNode
                q.put(leftNode)
        
        if index < len(levelOrder):
            rightChild = levelOrder[index]
            index += 1
            if rightChild != -1:
                rightNode = BinaryTreeNode(rightChild)
                currentNode.right = rightNode
                q.put(rightNode)
    
    return root

# Main
root = takeInput()
printLevelWise(root)

""" "\n"\t

#Path sum root to Leaf

"""

from sys import stdin, setrecursionlimit
import queue

setrecursionlimit(10 ** 6)


#Following is the structure used to represent the Binary Tree Node
class BinaryTreeNode:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None



def rootToLeafPathsSumToK(root, k):
	#Your code goes here
    ans = 0
    k -= root.data
 
    # If we reach a leaf node and sum becomes 0, then
    # return True
    if(subSum == 0 and root.left == None and root.right == None):
        return True
 
    # Otherwise check both subtrees
    if root.left is not None:
        ans = ans or rootToLeafPathsSumToK(root.left, subSum)
    if root.right is not None:
        ans = ans or rootToLeafPathsSumToK(root.right, subSum)
 
    return ans


def helper(root, k, path):
    if root is None:
        return

    # Adjust current path sum and add this node to the path
    k -= root.data
    path.append(root.data)

    # Check if it's a leaf node and path sum matches k
    if k == 0 and root.left is None and root.right is None:
        for i in path:
            print(i, end=" ")
        print()

    # Continue to search the path in the left and right subtree
    helper(root.left, k, path)
    helper(root.right, k, path)

    # Backtrack: remove the current node from the path before returning to the caller
    path.pop()

def rootToLeafPathsSumToK(root, k):
    if not root:
        return
    helper(root, k, [])

































#Taking level-order input using fast I/O method
def takeInput():
    levelOrder = list(map(int, stdin.readline().strip().split(" ")))
    start = 0
    
    length = len(levelOrder)

    if length == 1 :
        return None
    
    root = BinaryTreeNode(levelOrder[start])
    start += 1

    q = queue.Queue()
    q.put(root)

    while not q.empty():
        currentNode = q.get()

        leftChild = levelOrder[start]
        start += 1

        if leftChild != -1:
            leftNode = BinaryTreeNode(leftChild)
            currentNode.left =leftNode
            q.put(leftNode)

        rightChild = levelOrder[start]
        start += 1

        if rightChild != -1:
            rightNode = BinaryTreeNode(rightChild)
            currentNode.right =rightNode
            q.put(rightNode)

    return root

    
def printLevelWise(root):
    if root is None:
        return

    inputQ = queue.Queue()
    outputQ = queue.Queue()
    inputQ.put(root)

    while not inputQ.empty():
       
        while not inputQ.empty():
       
            curr = inputQ.get()
            print(curr.data, end=' ')
            if curr.left!=None:
                outputQ.put(curr.left)
            if curr.right!=None:
                outputQ.put(curr.right)
       
        print()
        inputQ, outputQ = outputQ, inputQ


# Main
root = takeInput()
k = int(stdin.readline().strip())
rootToLeafPathsSumToK(root, k)

""" "\n"\t

#Print nodes at distance k from node

"""

from sys import stdin, setrecursionlimit
import queue

setrecursionlimit(10 ** 6)


#Following is the structure used to represent the Binary Tree Node
class BinaryTreeNode:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None



	#Your code goes here
    
def nodesAtDistanceK(root, node, k):
    def findTargetAndPrintKDistanceNodes(node, target, k):
        if not node:
            return -1

        # If the current node is the target node, print nodes at distance K
        if node.data == target:
            printKDistanceDown(node, k)
            return 0

        # Try to find the target node in the left subtree
        left_distance = findTargetAndPrintKDistanceNodes(node.left, target, k)

        # If target is found in the left subtree, print nodes at distance K in the right subtree
        if left_distance != -1:
            if left_distance + 1 == k:
                print(node.data)
            else:
                printKDistanceDown(node.right, k - left_distance - 2)
            return left_distance + 1

        # Try to find the target node in the right subtree
        right_distance = findTargetAndPrintKDistanceNodes(node.right, target, k)

        # If target is found in the right subtree, print nodes at distance K in the left subtree
        if right_distance != -1:
            if right_distance + 1 == k:
                print(node.data)
            else:
                printKDistanceDown(node.left, k - right_distance - 2)
            return right_distance + 1

        return -1

    def printKDistanceDown(node, k):
        if not node or k < 0:
            return

        if k == 0:
            print(node.data)
            return

        # Recursively print nodes at distance K in left and right subtrees
        printKDistanceDown(node.left, k - 1)
        printKDistanceDown(node.right, k - 1)

    findTargetAndPrintKDistanceNodes(root, target, k)


# from sys import stdin, setrecursionlimit
# import queue

# setrecursionlimit(10 ** 6)


# #Following is the structure used to represent the Binary Tree Node
# class BinaryTreeNode:
#     def __init__(self, data):
#         self.data = data
#         self.left = None
#         self.right = None


# def nodesAtDistanceK(root, node, k) :
# 	#Your code goes here
#     if root is None or k< 0 :
#         return 
    
#     # If we reach a k distant node, print it
#     if k == 0 :
#         print (root.data)
#         return 
    
#     nodesAtDistanceK(root.left, k-1)
#     nodesAtDistanceK(root.right, k-1)



# def printkDistanceNode(root, target, k):
    
#     # Base Case 1 : IF tree is empty return -1
#     if root is None:
#         return -1

#     # If target is same as root. Use the downward function
#     # to print all nodes at distance k in subtree rooted with
#     # target or root
#     if root == target:
#         printkDistanceNodeDown(root, k)
#         return 0 
    
#     # Recur for left subtree
#     dl = printkDistanceNode(root.left, target, k)
    
#     # Check if target node was found in left subtree
#     if dl != -1:
        
#         # If root is at distance k from target, print root
#         # Note: dl is distance of root's left child 
#         # from target
#         if dl +1 == k :
#             print (root.data)
    
#         # Else go to right subtree and print all k-dl-2
#         # distant nodes 
#         # Note: that the right child is 2 edges away from
#         # left child
#         else:
#             printkDistanceNodeDown(root.right, k-dl-2)

#         # Add 1 to the distance and return value for
#         # for parent calls 
#         return 1 + dl

#     # MIRROR OF ABOVE CODE FOR RIGHT SUBTREE
#     # Note that we reach here only when node was not found
#     # in left subtree
#     dr = printkDistanceNode(root.right, target, k)
#     if dr != -1:
#         if (dr+1 == k):
#             print (root.data)
#         else:
#             printkDistanceNodeDown(root.left, k-dr-2)
#         return 1 + dr

#     # If target was neither present in left nor in right subtree
#     return -1






























	


#Taking level-order input using fast I/O method
def takeInput():
    levelOrder = list(map(int, stdin.readline().strip().split(" ")))
    start = 0
    
    length = len(levelOrder)

    if length == 1 :
        return None
    
    root = BinaryTreeNode(levelOrder[start])
    start += 1

    q = queue.Queue()
    q.put(root)

    while not q.empty():
        currentNode = q.get()

        leftChild = levelOrder[start]
        start += 1

        if leftChild != -1:
            leftNode = BinaryTreeNode(leftChild)
            currentNode.left =leftNode
            q.put(leftNode)

        rightChild = levelOrder[start]
        start += 1

        if rightChild != -1:
            rightNode = BinaryTreeNode(rightChild)
            currentNode.right =rightNode
            q.put(rightNode)

    return root

    
def printLevelWise(root):
    if root is None:
        return

    inputQ = queue.Queue()
    outputQ = queue.Queue()
    inputQ.put(root)

    while not inputQ.empty():
       
        while not inputQ.empty():
       
            curr = inputQ.get()
            print(curr.data, end=' ')
            if curr.left!=None:
                outputQ.put(curr.left)
            if curr.right!=None:
                outputQ.put(curr.right)
       
        print()
        inputQ, outputQ = outputQ, inputQ


# Main
root = takeInput()
target_k = stdin.readline().strip().split(" ")

target = int(target_k[0])
k = int(target_k[1])

nodesAtDistanceK(root, target, k)

""" "\n"\t

#
