#Find Path in BST

"""

import queue
class BinaryTreeNode:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None
        
def helper(root,data):
    path = []
    if not root:
        return path
    
    while root:
        path.insert(0,root.data)
        if root.data == data:
            return path
        elif root.data < data:
            root = root.right
        else:
            root = root.left
    
    # If no node with data k is found
    return []
def findPathBST(root,data):
    ans = helper(root,data)
    
    return ans 

    



def buildLevelTree(levelorder):
    index = 0
    length = len(levelorder)
    if length<=0 or levelorder[0]==-1:
        return None
    root = BinaryTreeNode(levelorder[index])
    index += 1
    q = queue.Queue()
    q.put(root)
    while not q.empty():
        currentNode = q.get()
        leftChild = levelorder[index]
        index += 1
        if leftChild != -1:
            leftNode = BinaryTreeNode(leftChild)
            currentNode.left =leftNode
            q.put(leftNode)
        rightChild = levelorder[index]
        index += 1
        if rightChild != -1:
            rightNode = BinaryTreeNode(rightChild)
            currentNode.right =rightNode
            q.put(rightNode)
    return root

# Main
levelOrder = [int(i) for i in input().strip().split()]
root = buildLevelTree(levelOrder)
data = int(input())
path = findPathBST(root,data)
if path is not None:
    for ele in path:
        print(ele,end=' ')

""" "\n"\t

#BST class

"""

class BinaryTreeNode:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None
class BST:
    
    def __init__(self):
        self.root = None
        self.numNodes = 0
    
    def printtreehelper(self,root):
        if root is None:
            return
        print(root.data,end=":")
        if root.left!=None:
            print("L:{},".format(root.left.data),end="")
        if root.right!=None:
            print("R:{}".format(root.right.data),end="")
        print()
        self.printtreehelper(root.left)
        self.printtreehelper(root.right)

    def printTree(self):
        self.printtreehelper(self.root)
    ##################################
    # PLEASE IMPLEMENT THIS FUNCTION #
    ##################################
    
    def searchhelper(self, root,data):
        if root is None:
            return False
        if root.data==data:
            return True
        if root.data>data:
            return self.searchhelper(root.left,data)
        else:
            return self.searchhelper(root.right,data)

    def search(self, data):
        return self.searchhelper(self.root,data)
    ##################################
    # PLEASE IMPLEMENT THIS FUNCTION #
    ##################################

    def inserthelper(self,root,data):
        if root is None:
            node=BinaryTreeNode(data)
            return node
        if root.data>=data:
            root.left=self.inserthelper(root.left,data)
            return root
        else:
            root.right=self.inserthelper(root.right,data)
            return root


    def insert(self, data):
        self.numNodes+=1
        self.root=self.inserthelper(self.root,data)

    ##################################
    # PLEASE IMPLEMENT THIS FUNCTION #
    ##################################
    
    def min(self,root):
        if root is None:
            return 10000
        if root.left is None:
            return root.data
        return self.min(root.left)

    def deletehelper(self,root,data):
        if root is None:
            return False,None
        if root.data<data:
            deleted,newrightnode = self.deletehelper(root.right,data)
            root.right=newrightnode
            return delete,root
        if root.data>data:
            deleted,newleftnode = self.deletehelper(root.left,data)
            root.left=newleftnode
            return delete,root  

        if root.left is None and root.right is None:
            return True,None
        if root.left is None:
            return True,root.right
        if root.right is None:
            return True,root.left

        replacement = self.min(root.right)
        root.data = replacement
        deleted,newrightnode=self.deletehelper(root.right,replacement)
        root.right=newrightnode
        return True,root

    
    def delete(self, data):
        deleted,newroot = self.deletehelper(self.root,data)
        if deleted:
            self.numNodes-=1
        self.root=newroot
        return deleted

    ##################################
    # PLEASE IMPLEMENT THIS FUNCTION #
    ##################################
    
    def count(self):
        return self.numNodes
        
b = BST()
q = int(input())
while (q > 0) :
    li = [int(ele) for ele in input().strip().split()]
    choice = li[0]
    q-=1
    if choice == 1:
        data = li[1]
        b.insert(data)
    elif choice == 2:
        data = li[1]
        b.delete(data)
    elif choice == 3:
        data = li[1]
        ans = b.search(data)
        if ans is True:
            print('true')
        else:
            print('false')
    else:
        b.printTree()

""" "\n"\t

#
