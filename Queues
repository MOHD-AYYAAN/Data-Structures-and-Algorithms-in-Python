#Queue using a Singly Linked List

"""

from sys import stdin


#Following is the structure of the node class for a Singly Linked List
class Node :

    def __init__(self, data) :
        self.data = data
        self.next = None


class Queue :

    #Define data members and __init__()
    def __init__(self):
         self.__head = None
         self.__tail = None
         self.__size = 0




    '''----------------- Public Functions of Stack -----------------'''

    def getSize(self) :
        #Implement the getSize() function
        return self.__size


    def isEmpty(self) :
        #Implement the isEmpty() function
        return self.__size==0



    def enqueue(self, data) :
        #Implement the enqueue(element) function
             self.__size += 1
             newNode = Node(data)
             if self.__head is None:
                 self.__head = newNode
                 self.__tail = newNode
             else:
                 self.__tail.next = newNode
                 self.__tail = newNode    



    def dequeue(self) :
        #Implement the dequeue() function
        if self.isEmpty():
                 return -1
        ans = self.__head.data
        self.__head = self.__head.next
        self.__size = self.__size - 1
        return ans


    def front(self) :
        #Implement the front() function
        if self.isEmpty():
            return -1 
        return self.__head.data




#main
q = int(stdin.readline().strip())

queue = Queue()

while q > 0 :

    inputs = stdin.readline().strip().split(" ")
    choice = int(inputs[0])

    if choice == 1 :
        data = int(inputs[1])
        queue.enqueue(data)

    elif choice == 2 :
        print(queue.dequeue())

    elif choice == 3 :
        print(queue.front())

    elif choice == 4 : 
        print(queue.getSize())

    else :
        if queue.isEmpty() :
            print("true")
        else :
            print("false")

    q -= 1

""" "\n"\t

#Queue using two stacks

"""
from os import *
from sys import *
from collections import *
from math import *

class Queue:
    # Stacks to be used in the operations.
    def __init__(self):
        self.stk1 = []
        self.stk2 = []

    # Enqueues 'X' into the queue. Returns true after enqueuing.
    def enqueue(self, X):
        while (len(self.stk1)!= 0):
            self.stk2.append(self.stk1.pop())
        self.stk1.append(X)

        while(len(self.stk2)!=0):
            self.stk1.append(self.stk2.pop())
        return True


    """
      Dequeues top element from queue. Returns -1 if the queue is empty, 
      otherwise returns the popped element.
    """
    def dequeue(self):
        if len(self.stk1)==0:
            return -1
        return self.stk1.pop()

""" "\n"\t

#Stack using two Queues

"""

from queue import Queue
from sys import stdin

import queue
class Stack :

	#Define data members and __init__()
	def __init__(self):
		self.__q1=queue.Queue()
		self.__q2=queue.Queue()



	'''----------------- Public Functions of Stack -----------------'''


	def getSize(self) :
		#Implement the getSize() function
		return self.__q1.qsize()



	def isEmpty(self) :
		#Implement the isEmpty() function
		return self.getSize()==0



	def push(self, data) :
		#Implement the push(element) function
		self.__q1.put(data)




	def pop(self) :
		#Implement the pop() function
		if self.isEmpty():
			return -1
		while self.__q1.qsize() > 1:
			self.__q2.put(self.__q1.get())
		ans = self.__q1.get()
		temp = self.__q1
		self.__q1 = self.__q2
		self.__q2 = temp
		return ans



	def top(self) :
		#Implement the top() function
		if self.isEmpty() :
			return -1
		while self.__q1.qsize() > 1 : 
			self.__q2.put(self.__q1.get())
		ans = self.__q1.get()
		self.__q2.put(ans)
		temp = self.__q1
		self.__q1 = self.__q2
		self.__q2 = temp
		return ans
		




#main
q = int(stdin.readline().strip())

stack = Stack()

while q > 0 :

	inputs = stdin.readline().strip().split(" ")
	choice = int(inputs[0])

	if choice == 1 :
		data = int(inputs[1])
		stack.push(data)

	elif choice == 2 :
		print(stack.pop())

	elif choice == 3 :
		print(stack.top())

	elif choice == 4 : 
		print(stack.getSize())

	else :
		if stack.isEmpty() :
			print("true")
		else :
			print("false")

	q -= 1

""" "\n"\t

#Reverse Queue

"""
from sys import stdin, setrecursionlimit
import queue

setrecursionlimit(10 ** 6)

def reverseQueue(inputQueue) :
    arr=[]
    if inputQueue.qsize()==0:
        return
    
    while inputQueue.qsize()!=1:
        ele=inputQueue.get()
        arr.append(ele)
    for i in range(0,len(arr)):    
        inputQueue.put(arr.pop())
    return inputQueue

""" "\n"\t

#Reverse the first K elements in the Queue

"""

from sys import stdin
import queue

# def reverseFirstK(q,si,k,n) :
#     #Your code goes here
#     if q.empty():
#         return 
#     if si == k:
#         for i in range(n-k):
#             s.append(q.get())
#         return q
    
#     data = q.get()
#     reverseFirstK(q,si+1,k,n)
#     return q.put(data)

def reverseFirstK(q, si, k, n):
    # Your code goes here
    if si == k:  # Base case for reversing first k elements
        return
    
    data = q.get()
    reverseFirstK(q, si + 1, k, n)
    q.put(data)
    
    if si == 0:  # Base case for moving remaining elements to the end
        for i in range(n - k):
            q.put(q.get())

def reverseKElements(q, k):
    n = q.qsize()
    if k == 0 or k > n:
        return q
    
    reverseFirstK(q, 0, k, n)
    return q

































    



'''-------------- Utility Functions --------------'''


#Takes a list as a stack and returns whether the stack is empty or not
def isEmpty(stack) :
    return len(stack) == 0


#Takes a list as a stack and returns the element at the top
def top(stack) :
    #assuming the stack is never empty
    return stack[len(stack) - 1]



def takeInput():
    n_k = list(map(int, stdin.readline().strip().split(" ")))
    n = n_k[0]
    k = n_k[1]

    qu = queue.Queue()
    values = list(map(int, stdin.readline().strip().split()))

    for i in range(n) :
        qu.put(values[i])

    return k, qu


#main
k, qu = takeInput()

qu = reverseKElements(qu, k)

while not qu.empty() :
    print(qu.get(), end = " ")
 """ "\n"\t
